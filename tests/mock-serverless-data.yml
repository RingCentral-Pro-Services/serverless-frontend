service: your-service-name

plugins:
  - serverless-single-page-app-plugin

custom:
  s3Bucket: your-desired-s3-bucket-name

provider:
  name: aws
  runtime: nodejs12

resources:
  Resources:
    ## Specifying the S3 Bucket
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        PublicAccessBlockConfiguration: ## https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-publicaccessblockconfiguration.html
          BlockPublicAcls: 'true'
          IgnorePublicAcls: 'true'
          BlockPublicPolicy: 'true'
          RestrictPublicBuckets: 'true'
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: "Grant a CloudFront Origin Identity access to private s3 bucket content"
              Effect: Allow
              Principal: 
                CanonicalUser:
                  'Fn::GetAtt': [CloudFrontOriginAccessIdentity , S3CanonicalUserId] #{"CanonicalUser":"CloudFront Origin Identity Canonical User ID"}
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          WebACLId: 
            Ref: "WebACL"
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: WebApp
              S3OriginConfig:
                OriginAccessIdentity: # origin-access-identity/cloudfront/{Ref: CloudFrontOriginAccessIdentity}
                  Fn::Join:
                  - ""
                  - - "origin-access-identity/cloudfront/"
                    - Ref: "CloudFrontOriginAccessIdentity"
          Enabled: 'true'
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            ## The origin id defined above
            TargetOriginId: WebApp
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix
    
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: CloudFront OAI for app in development '${self:custom.s3Bucket}'

    WebACL:
      Type: "AWS::WAF::WebACL"
      Properties:
        DefaultAction:
          Type: BLOCK
        MetricName: "TrustedIPs"
        Name: "TrustedIPs"
        Rules:
          - Action:
              Type: ALLOW
            Priority: 1
            RuleId: {Ref: WAFRule}
    WAFRule:
      Type: "AWS::WAF::Rule"
      Properties:
        Name: "MyIPSetRule"
        MetricName: "MyIPSetRule"
        Predicates:
          - DataId: {Ref: WAFIpSet}
            Negated: false
            Type: "IPMatch"
    WAFIpSet:
      Type: "AWS::WAF::IPSet"
      Properties:
        IPSetDescriptors: # Corporate IP whitelist goes here
          - Type: "IPV4"
            Value: "8.8.8.8/29" # Google
        Name: IPSet for whitelisted IP adresses

  ## In order to print out the hosted domain via `serverless domainInfo` we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]