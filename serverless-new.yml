service: kyle-vw-frontend-testing

frameworkVersion: ">=1.2.0"

plugins:
  - serverless-single-page-app-plugin

custom:
  s3Bucket: kyle-vw-bucket-testing
  appDomain: 'ringcentralps.com'
  appEndpoint: 'kyle-testing10'
  acmCertificateArn: 'arn:aws:acm:us-east-1:179104732438:certificate/f92a9247-ce16-471f-b808-be36a28b5125' # The Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate.

provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1

resources:
  Resources:
    ## Specifying the S3 Bucket
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        Tags:
          - Key: Organization
            Value: proserv
          - Key: App
            Value: '${self:custom.appEndpoint}.${self:custom.appDomain}'
    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              ## An identifier for the origin which must be unique within the distribution
              Id: WebApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              # S3OriginConfig:
              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
          Enabled: 'true'
          ## Uncomment the following section in case you are using a custom domain
          Aliases:
          - '${self:custom.appEndpoint}.${self:custom.appDomain}'
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            ## The origin id defined above
            TargetOriginId: WebApp
            ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            #CloudFrontDefaultCertificate: 'true'
            ## Comment out the default and uncomment following section to use custom domain certificate.
            AcmCertificateArn: ${self:custom.acmCertificateArn} #${file(./config.js):${opt:stage}.CERTIFICATE_ARN}
            SslSupportMethod: sni-only
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix
        Tags:
          - Key: Organization
            Value: proserv
          - Key: App
            Value: '${self:custom.appEndpoint}.${self:custom.appDomain}'

    WebAppDNSName:
      Type: AWS::Route53::RecordSetGroup
      DependsOn: WebAppCloudFrontDistribution
      Properties:
        HostedZoneName: '${self:custom.appDomain}.'
        RecordSets:
          - Name: '${self:custom.appEndpoint}.${self:custom.appDomain}'
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2 # Specific to cloudfront, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
              DNSName:
                'Fn::GetAtt': [WebAppCloudFrontDistribution, DomainName]

# resources:
#   Resources:
#     ## Specifying the S3 Bucket
#     WebAppS3Bucket:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: ${self:custom.s3Bucket}
#         AccessControl: PublicRead
#         WebsiteConfiguration:
#           IndexDocument: index.html
#           ErrorDocument: index.html
#     ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
#     WebAppS3BucketPolicy:
#       Type: AWS::S3::BucketPolicy
#       Properties:
#         Bucket:
#           Ref: WebAppS3Bucket
#         PolicyDocument:
#           Statement:
#             - Sid: PublicReadGetObject
#               Effect: Allow
#               Principal: "*"
#               Action:
#               - s3:GetObject
#               Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
#     ## Specifying the CloudFront Distribution to server your Web Application
#     WebAppCloudFrontDistribution:
#       Type: AWS::CloudFront::Distribution
#       Properties:
#         DistributionConfig:
#           Origins:
#             - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
#               ## An identifier for the origin which must be unique within the distribution
#               Id: WebApp
#               CustomOriginConfig:
#                 HTTPPort: 80
#                 HTTPSPort: 443
#                 OriginProtocolPolicy: https-only
#               ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
#               # S3OriginConfig:
#               #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
#           Enabled: 'true'
#           ## Uncomment the following section in case you are using a custom domain
#           Aliases:
#           - kyle-vw-frontend-testing.rcproserv.org
#           DefaultRootObject: index.html
#           ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
#           ## The only exception are files that actually exist e.h. app.js, reset.css
#           CustomErrorResponses:
#             - ErrorCode: 404
#               ResponseCode: 200
#               ResponsePagePath: /index.html
#           DefaultCacheBehavior:
#             AllowedMethods:
#               - DELETE
#               - GET
#               - HEAD
#               - OPTIONS
#               - PATCH
#               - POST
#               - PUT
#             ## The origin id defined above
#             TargetOriginId: WebApp
#             ## Defining if and how the QueryString and Cookies are forwarded to the origin which in this case is S3
#             ForwardedValues:
#               QueryString: 'false'
#               Cookies:
#                 Forward: none
#             ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
#             ViewerProtocolPolicy: redirect-to-https
#           ## The certificate to use when viewers use HTTPS to request objects.
#           ViewerCertificate:
#             #CloudFrontDefaultCertificate: 'true'
#             ## Comment out the default and uncomment following section to use custom domain certificate.
#             AcmCertificateArn: arn:aws:acm:us-east-1:179104732438:certificate/83e50575-66de-4a52-8012-b6736293c17b #${file(./config.js):${opt:stage}.CERTIFICATE_ARN}
#             SslSupportMethod: sni-only
#           ## Uncomment the following section in case you want to enable logging for CloudFront requests
#           # Logging:
#           #   IncludeCookies: 'false'
#           #   Bucket: mylogs.s3.amazonaws.com
#           #   Prefix: myprefix
#     WebAppDNSName:
#       Type: AWS::Route53::RecordSetGroup
#       DependsOn: WebAppCloudFrontDistribution
#       Properties:
#         HostedZoneName: 'rcproserv.org.'
#         RecordSets:
#           - Name: ${self:custom.appEndpoint} #!Ref 'FullDomainName'
#             Type: A
#             AliasTarget:
#               HostedZoneId: Z2FDTNDATAQYW2 #Z6Y8MHJ6E603M
#               DNSName:
#                 'Fn::GetAtt': [WebAppCloudFrontDistribution, DomainName]

# resources:
#   Resources:
#     WebsiteBucket:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: ${self:custom.s3Bucket} #!Ref 'FullDomainName'
#         AccessControl: PublicRead
#         WebsiteConfiguration:
#           IndexDocument: index.html
#           ErrorDocument: index.html
#       DeletionPolicy: Retain
#     WebsiteBucketPolicy:
#       Type: AWS::S3::BucketPolicy
#       Properties:
#         Bucket:
#           Ref: WebsiteBucket
#         PolicyDocument:
#           Statement:
#           - Sid: PublicReadForGetBucketObjects
#             Effect: Allow
#             Principal: '*'
#             Action: s3:GetObject
#             Resource: arn:aws:s3:::${self:custom.s3Bucket}/* #!Join ['', ['arn:aws:s3:::', !Ref 'WebsiteBucket', /*]]
#     WebsiteCloudfront:
#       Type: AWS::CloudFront::Distribution
#       DependsOn: WebsiteBucket
#       Properties:
#         DistributionConfig:
#           Comment: Cloudfront Distribution pointing to S3 bucket
#           Origins:
#             - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com #'Fn::Select': [2, 'Fn::Split': ["/", 'Fn::GetAtt': WebsiteBucket.WebsiteURL]]
#               #- 'Fn::Join': ['', [ Ref: WebsiteBucket, '.s3.amazonaws.com' ] ]
#               Id: S3Origin
#               CustomOriginConfig:
#                 HTTPPort: 80
#                 HTTPSPort: 443
#                 OriginProtocolPolicy: https-only #http-only
#           Enabled: true
#           HttpVersion: 'http2'
#           DefaultRootObject: index.html
#           CustomErrorResponses:
#             - ErrorCode: 404
#               ResponseCode: 200
#               ResponsePagePath: /index.html
#           Aliases:
#             - Ref: ${self:custom.domainName} #'FullDomainName'
#           DefaultCacheBehavior:
#             AllowedMethods:
#             - DELETE
#             - GET
#             - HEAD
#             - OPTIONS
#             - PATCH
#             - POST
#             - PUT
#             Compress: true
#             TargetOriginId: S3Origin
#             ForwardedValues:
#               QueryString: 'false'
#               Cookies:
#                 Forward: none
#             ViewerProtocolPolicy: redirect-to-https
#           #PriceClass: PriceClass_All
#           ViewerCertificate:
#             AcmCertificateArn:
#               - Ref: ${self:custom.acmCertificateArn}
#             SslSupportMethod: sni-only
#     WebsiteDNSName:
#       Type: AWS::Route53::RecordSetGroup
#       DependsOn: WebsiteCloudfront
#       Properties:
#         HostedZoneName: 'rcproserv.org.'
#         RecordSets:
#           - Name: ${self:custom.domainName} #!Ref 'FullDomainName'
#             Type: A
#             AliasTarget:
#               HostedZoneId: Z6Y8MHJ6E603M
#               DNSName:
#                 'Fn::GetAtt': [WebsiteCloudfront, DomainName]

# resources:
#   Resources:
#     TheCloudFrontDistribution:
#       Type: AWS::CloudFront::Distribution
#       Properties:
#         DistributionConfig:
#           Aliases:
#             - Ref: ${self:custom.domainName} #DomainName
#           DefaultCacheBehavior:
#             Compress: 'true'
#             AllowedMethods:
#               - DELETE
#               - GET
#               - HEAD
#               - OPTIONS
#               - PATCH
#               - POST
#               - PUT
#             ForwardedValues:
#               QueryString: 'false'
#             TargetOriginId: the-s3-bucket
#             ViewerProtocolPolicy: redirect-to-https
#           DefaultRootObject: index.html
#           CustomErrorResponses:
#             - ErrorCode: 404
#               ResponseCode: 200
#               ResponsePagePath: /index.html
#           Enabled: 'true'
#           #HttpVersion: http2
#           Origins:
#             - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
#                 #!Join [ "", [ !Ref TheBucket, ".s3.amazonaws.com" ] ]
#                 #- 'Fn::Join': ['', [ Ref: TheBucket, '.s3.amazonaws.com' ] ]
#               Id: the-s3-bucket
#               S3OriginConfig:
#                 OriginAccessIdentity:
#                   #!Join [ "", [ "origin-access-identity/cloudfront/", !Ref TheCloudFrontOriginAccessIdentity ] ]
#                   - 'Fn::Join': ['', [ "origin-access-identity/cloudfront/", Ref: TheCloudFrontOriginAccessIdentity ] ]
#           #PriceClass: 
#           #  Ref: PriceClass
#           ViewerCertificate:
#             AcmCertificateArn: 
#               Ref: AcmCertificateArn
#             MinimumProtocolVersion: TLSv1
#             SslSupportMethod: sni-only
#         Tags:
#           - Key: Domain
#             Value:
#               Ref: ${self:custom.domainName} #DomainName
#           - Key: Organization
#             Value: proserv

#     TheCloudFrontOriginAccessIdentity:
#       Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
#       Properties:
#         CloudFrontOriginAccessIdentityConfig:
#           Comment: 'CloudFront OAI for ${self:custom.domainName}'

#     TheBucket:
#       Type: AWS::S3::Bucket
#       DeletionPolicy: Retain
#       Properties:
#         BucketName: ${self:custom.s3Bucket}
#         WebsiteConfiguration:
#           IndexDocument: index.html
#           ErrorDocument: index.html
#         Tags:
#           - Key: Domain
#             Value:
#               Ref: ${self:custom.domainName} #DomainName
#           - Key: Organization
#             Value: proserv

#     TheBucketPolicy:
#       Type: AWS::S3::BucketPolicy
#       Properties:
#         Bucket:
#           Ref: TheBucket
#         PolicyDocument:
#           Statement:
#             -
#               Action:
#                 - s3:GetObject
#               Effect: Allow
#               Resource: 
#                 - 'Fn::Join': [ '', [ "arn:aws:s3:::", Ref: TheBucket, "/*" ] ]
#               #Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
#               Principal:
#                 CanonicalUser: #!GetAtt TheCloudFrontOriginAccessIdentity.S3CanonicalUserId
#                   'Fn::GetAtt': [ TheCloudFrontOriginAccessIdentity, S3CanonicalUserId ]

#     FrontEndDNSName:
#       Type: AWS::Route53::RecordSetGroup
#       Properties:
#         HostedZoneName:
#           - 'Fn::Join': ['', [Ref: 'rcproserv.org', .]]
#         RecordSets:
#         - Name: 
#             Ref: '${self:custom.domainName}.' #'FullDomainName'
#           Type: A
#           AliasTarget:
#             HostedZoneId: Z6Y8MHJ6E603M
#             DNSName: 
#               'Fn::GetAtt': [TheCloudFrontDistribution, DomainName]

  ## In order to print out the hosted domain via `serverless domainInfo` we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppCloudFrontDistributionOutput:
      Value:
        'Fn::GetAtt': [ WebAppCloudFrontDistribution, DomainName ]